{"ast":null,"code":"var _jsxFileName = \"G:\\\\Projects\\\\react-watchlist\\\\src\\\\context\\\\GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, createContext, useEffect } from 'react';\nimport AppReducer from './AppReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  watchlist: localStorage.getItem('watchlist') ? JSON.parse(localStorage.getItem('watchlist')) : [],\n  watched: localStorage.getItem('watched') ? JSON.parse(localStorage.getItem('watched')) : []\n};\nexport const GlobalContext = /*#__PURE__*/createContext(initialState);\nexport const GlobalProvider = props => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  useEffect(() => {\n    localStorage.setItem('watchlist', JSON.stringify(state.watchlist));\n    localStorage.setItem('watched', JSON.stringify(state.watched));\n  }, [state]);\n\n  const addMovieToWatchlist = movie => {\n    dispatch({\n      type: \"ADD_MOVIE_TO_WATCHLIST\",\n      payload: movie\n    });\n  };\n\n  const addMovieToWatched = movie => {\n    dispatch({\n      type: \"ADD_MOVIE_TO_WATCHED\",\n      payload: movie\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      watchlist: state.watchlist,\n      watched: state.watched,\n      addMovieToWatchlist,\n      addMovieToWatched\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GlobalProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["G:/Projects/react-watchlist/src/context/GlobalState.js"],"names":["React","useReducer","createContext","useEffect","AppReducer","initialState","watchlist","localStorage","getItem","JSON","parse","watched","GlobalContext","GlobalProvider","props","state","dispatch","setItem","stringify","addMovieToWatchlist","movie","type","payload","addMovieToWatched","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,EAA2CC,SAA3C,QAA4D,OAA5D;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApC,GAAoF,EAD9E;AAEjBG,EAAAA,OAAO,EAAEJ,YAAY,CAACC,OAAb,CAAqB,SAArB,IAAkCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAlC,GAAgF;AAFxE,CAArB;AAKA,OAAO,MAAMI,aAAa,gBAAGV,aAAa,CAACG,YAAD,CAAnC;AAEP,OAAO,MAAMQ,cAAc,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,UAAU,CAACG,UAAD,EAAaC,YAAb,CAApC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,YAAY,CAACU,OAAb,CAAqB,WAArB,EAAkCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACT,SAArB,CAAlC;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,SAArB,EAAgCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACJ,OAArB,CAAhC;AACH,GAHQ,EAGN,CAACI,KAAD,CAHM,CAAT;;AAKA,QAAMI,mBAAmB,GAAIC,KAAD,IAAW;AACnCJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,wBAAR;AAAkCC,MAAAA,OAAO,EAAEF;AAA3C,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMG,iBAAiB,GAAIH,KAAD,IAAW;AACjCJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,sBAAR;AAAgCC,MAAAA,OAAO,EAAEF;AAAzC,KAAD,CAAR;AACH,GAFD;;AAIA,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3Bd,MAAAA,SAAS,EAAES,KAAK,CAACT,SADU;AAE3BK,MAAAA,OAAO,EAAEI,KAAK,CAACJ,OAFY;AAG3BQ,MAAAA,mBAH2B;AAI3BI,MAAAA;AAJ2B,KAA/B;AAAA,cAMKT,KAAK,CAACU;AANX;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA1BM;;GAAMX,c;;KAAAA,c","sourcesContent":["import React, { useReducer, createContext, useEffect } from 'react'\r\nimport AppReducer from './AppReducer'\r\n\r\nconst initialState = {\r\n    watchlist: localStorage.getItem('watchlist') ? JSON.parse(localStorage.getItem('watchlist')) : [],\r\n    watched: localStorage.getItem('watched') ? JSON.parse(localStorage.getItem('watched')) : [],\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState)\r\n\r\nexport const GlobalProvider = (props) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState)\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('watchlist', JSON.stringify(state.watchlist))\r\n        localStorage.setItem('watched', JSON.stringify(state.watched))\r\n    }, [state])\r\n\r\n    const addMovieToWatchlist = (movie) => {\r\n        dispatch({ type: \"ADD_MOVIE_TO_WATCHLIST\", payload: movie });\r\n    };\r\n\r\n    const addMovieToWatched = (movie) => {\r\n        dispatch({ type: \"ADD_MOVIE_TO_WATCHED\", payload: movie });\r\n    };\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n            watchlist: state.watchlist,\r\n            watched: state.watched,\r\n            addMovieToWatchlist,\r\n            addMovieToWatched\r\n        }}>\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}