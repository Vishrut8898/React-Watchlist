{"ast":null,"code":"var _jsxFileName = \"G:\\\\Projects\\\\react-watchlist\\\\src\\\\components\\\\ResultCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ResultCard = ({\n  movie\n}) => {\n  _s();\n\n  const {\n    addMovieToWatchlist,\n    addMovieToWatched,\n    watchlist,\n    watched\n  } = useContext(GlobalContext);\n  const storedWatchlistMovie = watchlist.find(m => m.id === movie.id);\n  const storedWatchedMovie = watched.find(m => m.id === movie.id);\n  const watchlistDisabled = storedWatchlistMovie ? true : false;\n  const watchedDisabled = storedWatchedMovie ? true : false;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"result-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poster-wrapper\",\n      children: movie.poster_path ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `https://image.tmdb.org/t/p/w200/${movie.poster_path}`,\n        alt: `${movie.title} Poster`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 39\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filler-poster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"release-date\",\n          children: movie.release_date ? movie.release_date.substring(0, 4) : '--'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ResultCard, \"sxHM78nru+JGiSrzgG3akstL6oU=\");\n\n_c = ResultCard;\nexport default ResultCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultCard\");","map":{"version":3,"sources":["G:/Projects/react-watchlist/src/components/ResultCard.js"],"names":["React","useContext","GlobalContext","ResultCard","movie","addMovieToWatchlist","addMovieToWatched","watchlist","watched","storedWatchlistMovie","find","m","id","storedWatchedMovie","watchlistDisabled","watchedDisabled","poster_path","title","release_date","substring"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,wBAA9B;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAAA;;AAC5B,QAAM;AAAEC,IAAAA,mBAAF;AAAuBC,IAAAA,iBAAvB;AAA0CC,IAAAA,SAA1C;AAAqDC,IAAAA;AAArD,MAAiEP,UAAU,CAACC,aAAD,CAAjF;AAEA,QAAMO,oBAAoB,GAAGF,SAAS,CAACG,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASR,KAAK,CAACQ,EAAnC,CAA7B;AACA,QAAMC,kBAAkB,GAAGL,OAAO,CAACE,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASR,KAAK,CAACQ,EAAjC,CAA3B;AAEA,QAAME,iBAAiB,GAAGL,oBAAoB,GAAG,IAAH,GAAU,KAAxD;AACA,QAAMM,eAAe,GAAGF,kBAAkB,GAAG,IAAH,GAAU,KAApD;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBACMT,KAAK,CAACY,WAAN,gBAAoB;AAAK,QAAA,GAAG,EAAG,mCAAkCZ,KAAK,CAACY,WAAY,EAA/D;AAAkE,QAAA,GAAG,EAAG,GAAEZ,KAAK,CAACa,KAAM;AAAtF;AAAA;AAAA;AAAA;AAAA,cAApB,gBACE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,oBAAwBb,KAAK,CAACa;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAI,UAAA,SAAS,EAAC,cAAd;AAAA,oBACMb,KAAK,CAACc,YAAN,GAAqBd,KAAK,CAACc,YAAN,CAAmBC,SAAnB,CAA6B,CAA7B,EAAgC,CAAhC,CAArB,GAA0D;AADhE;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CA/BD;;GAAMhB,U;;KAAAA,U;AAiCN,eAAeA,UAAf","sourcesContent":["import React, {useContext} from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\n\r\nconst ResultCard = ({movie}) => {\r\n    const { addMovieToWatchlist, addMovieToWatched, watchlist, watched } = useContext(GlobalContext)\r\n\r\n    const storedWatchlistMovie = watchlist.find(m => m.id === movie.id)\r\n    const storedWatchedMovie = watched.find(m => m.id === movie.id)\r\n\r\n    const watchlistDisabled = storedWatchlistMovie ? true : false\r\n    const watchedDisabled = storedWatchedMovie ? true : false\r\n\r\n    return (\r\n        <div className=\"result-card\">\r\n            <div className=\"poster-wrapper\">\r\n                {(movie.poster_path ? <img src={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`} alt={`${movie.title} Poster`} /> : (\r\n                    <div className=\"filler-poster\"></div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n                <div className=\"header\">\r\n                    <div className=\"title\">{movie.title}</div>\r\n                    <h4 className=\"release-date\">\r\n                        {(movie.release_date ? movie.release_date.substring(0, 4) : '--')}\r\n                    </h4>\r\n                </div>\r\n\r\n                <div className=\"controls\">\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultCard\r\n"]},"metadata":{},"sourceType":"module"}